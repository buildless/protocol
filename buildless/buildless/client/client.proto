// Copyright 2023 Elide Ventures LLC
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

syntax = "proto3";

/**
 * Specifies records which detail information about build cache clients.
 */
package buildless.client;

option cc_enable_arenas = true;
option go_package = "github.com/elide-dev/buildless;buildless.client";
option java_multiple_files = true;
option java_package = "cloud.elide.cache.proto.client";
option java_string_check_utf8 = true;
option optimize_for = SPEED;

import "buildless/common.proto";


// ## Cache Client Agent
//
// Specifies known cache client engines which can be used with Buildless.
enum CacheClientAgent {
  // No client is specified; this is a default value which may indicate a protocol-incompatible enumeration.
  CLIENT_UNSPECIFIED = 0;

  // Generic cache clients of any type.
  GENERIC = 110;

  // Cache client: Gradle.
  GRADLE = 210;

  // Cache client: Maven.
  MAVEN = 220;

  // Cache client: Bazel/Blaze.
  BAZEL = 310;

  // Cache client: CCache.
  CCACHE = 410;

  // Cache client: SCCache, an extension of CCache.
  SCCACHE = 420;

  // Cache client: Turborepo.
  TURBO = 510;

  // Cache client: Nix.
  NIX = 610;

  // Cache client: Docker.
  DOCKER = 710;

  // Cache client: GitHub Actions.
  GITHUB_ACTIONS = 810;

  // Cache client: Raw Redis.
  REDIS = 910;
}


// ## Cache Client Spec
//
// Specifies basic information about a build cache client. Only fields which have known values are filled in. Clients
// can be specified via a known enumeration (`CacheClient`) or an arbitrary user-agent string. When specifying a known
// cache client, the `agent` string may be enclosed as additional version material, if known.
message CacheClientSpec {
  // Known client, if applicable and available.
  CacheClientAgent agent = 1;

  // User-agent string, if available.
  string ua = 2;

  // Version detected for the client, if available and applicable.
  buildless.Version version = 3;
}


// ## Cache Client
//
// Specifies information about a cache client, to the extent it is identifiable from protocol material. This may include
// the type of client, the version of the client, and any known or declared capabilities.
message CacheClient {
  // Basic information about the client, including the type of client and version, if known.
  CacheClientSpec info = 1;
}
